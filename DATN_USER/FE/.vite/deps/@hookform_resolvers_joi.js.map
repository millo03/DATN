{
  "version": 3,
  "sources": ["../../node_modules/@hookform/resolvers/src/validateFieldsNatively.ts", "../../node_modules/@hookform/resolvers/src/toNestErrors.ts", "../../node_modules/@hookform/resolvers/joi/src/joi.ts"],
  "sourcesContent": ["import {\n  get,\n  FieldError,\n  ResolverOptions,\n  Ref,\n  FieldErrors,\n  FieldValues,\n} from 'react-hook-form';\n\nconst setCustomValidity = (\n  ref: Ref,\n  fieldPath: string,\n  errors: FieldErrors,\n) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors);\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) =>\n        setCustomValidity(ref, fieldPath, errors),\n      );\n    }\n  }\n};\n", "import {\n  get,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n  FieldValues,\n  InternalFieldName,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const isDateObject = (value: unknown): value is Date => value instanceof Date;\n\nexport const isNullOrUndefined = (value: unknown): value is null | undefined => value == null;\n\nexport const isObjectType = (value: unknown): value is object =>\n  typeof value === 'object';\n\nexport const isObject = <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n\nexport const isKey = (value: string) => /^\\w*$/.test(value);\n\nconst compact = <TValue>(value: TValue[]) =>\n  Array.isArray(value) ? value.filter(Boolean) : [];\n\nconst stringToPath = (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nconst set = (object: FieldValues, path: string, value?: unknown) => {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n            ? []\n            : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n};\n\n\nexport const toNestErrors = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n    const error = Object.assign(errors[path] || {}, {\n      ref: field && field.ref,\n    });\n\n    if (isNameInFieldArray(options.names || Object.keys(errors), path)) {\n      const fieldArrayErrors = Object.assign({}, get(fieldErrors, path));\n\n      set(fieldArrayErrors, 'root', error);\n      set(fieldErrors, path, fieldArrayErrors);\n    } else {\n      set(fieldErrors, path, error);\n    }\n  }\n\n  return fieldErrors;\n};\n\nconst isNameInFieldArray = (\n  names: InternalFieldName[],\n  name: InternalFieldName,\n) => names.some((n) => n.startsWith(name + '.'));\n", "import { appendErrors, FieldError } from 'react-hook-form';\nimport { toNestErrors, validateFieldsNatively } from '@hookform/resolvers';\nimport type { ValidationError } from 'joi';\nimport { Resolver } from './types';\n\nconst parseErrorSchema = (\n  error: ValidationError,\n  validateAllFieldCriteria: boolean,\n) =>\n  error.details.length\n    ? error.details.reduce<Record<string, FieldError>>((previous, error) => {\n        const _path = error.path.join('.');\n\n        if (!previous[_path]) {\n          previous[_path] = { message: error.message, type: error.type };\n        }\n\n        if (validateAllFieldCriteria) {\n          const types = previous[_path].types;\n          const messages = types && types[error.type!];\n\n          previous[_path] = appendErrors(\n            _path,\n            validateAllFieldCriteria,\n            previous,\n            error.type,\n            messages\n              ? ([] as string[]).concat(messages as string[], error.message)\n              : error.message,\n          ) as FieldError;\n        }\n\n        return previous;\n      }, {})\n    : {};\n\nexport const joiResolver: Resolver =\n  (\n    schema,\n    schemaOptions = {\n      abortEarly: false,\n    },\n    resolverOptions = {},\n  ) =>\n  async (values, context, options) => {\n    const _schemaOptions = Object.assign({}, schemaOptions, {\n      context,\n    });\n\n    let result: Record<string, any> = {};\n    if (resolverOptions.mode === 'sync') {\n      result = schema.validate(values, _schemaOptions);\n    } else {\n      try {\n        result.value = await schema.validateAsync(values, _schemaOptions);\n      } catch (e) {\n        result.error = e;\n      }\n    }\n\n    if (result.error) {\n      return {\n        values: {},\n        errors: toNestErrors(\n          parseErrorSchema(\n            result.error,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n\n    options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n    return {\n      errors: {},\n      values: result.value,\n    };\n  };\n"],
  "mappings": "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",
  "names": ["setCustomValidity", "ref", "fieldPath", "errors", "error", "get", "message", "reportValidity", "validateFieldsNatively", "options", "_loop", "field", "fields", "refs", "forEach", "isDateObject", "value", "Date", "isNullOrUndefined", "isObjectType", "isObject", "Array", "isArray", "isKey", "test", "set", "object", "path", "index", "tempPath", "input", "replace", "split", "filter", "Boolean", "length", "lastIndex", "key", "newValue", "objValue", "isNaN", "toNestErrors", "shouldUseNativeValidation", "fieldErrors", "Object", "assign", "isNameInFieldArray", "names", "keys", "fieldArrayErrors", "name", "some", "n", "startsWith", "joiResolver", "schema", "schemaOptions", "resolverOptions", "abortEarly", "values", "context", "options", "_temp3", "result", "error", "errors", "toNestErrors", "validateAllFieldCriteria", "shouldUseNativeValidation", "criteriaMode", "details", "length", "reduce", "previous", "_path", "path", "join", "message", "type", "types", "messages", "appendErrors", "concat", "validateFieldsNatively", "value", "_schemaOptions", "Object", "assign", "_temp2", "mode", "validate", "_temp", "_catch", "Promise", "resolve", "validateAsync", "then", "_schema$validateAsync", "e", "reject"]
}
